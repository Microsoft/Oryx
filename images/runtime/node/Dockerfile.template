# Startup script generator
FROM golang:1.11-%NODE_BASE_IMAGE_ALPINE_OR_STRETCH% as startupCmdGen
WORKDIR /go/src/startupscriptgenerator/
COPY src/startupscriptgenerator .
ARG GIT_COMMIT=unspecified
ARG BUILD_NUMBER=unspecified
ENV GIT_COMMIT=${GIT_COMMIT}
ENV BUILD_NUMBER=${BUILD_NUMBER}
# GOPATH is set to "/go" in the base image, so no need to set it again
RUN ./build.sh node /opt/startupcmdgen/startupcmdgen

FROM node:%NODE_BASE_IMAGE%

# Bake Application Insights key from pipeline variable into final image
ARG AI_KEY
ENV ORYX_AI_INSTRUMENTATION_KEY=${AI_KEY}

# All users need access to node_modules at the root, as this is the location
# for packages valid for all apps.
RUN mkdir -p /node_modules \
 && chmod 777 /node_modules

# PM2 is supported as an option when running the app,
# so we need to make sure it is available in our images.
RUN npm install -g pm2

COPY --from=startupCmdGen /opt/startupcmdgen/startupcmdgen /opt/startupcmdgen/startupcmdgen
RUN ln -s /opt/startupcmdgen/startupcmdgen /usr/local/bin/oryx

# Node wrapper is used to debug apps when node is executed indirectly, e.g. by npm.
COPY src/startupscriptgenerator/node/wrapper/node /opt/node-wrapper/
RUN chmod a+x /opt/node-wrapper/node