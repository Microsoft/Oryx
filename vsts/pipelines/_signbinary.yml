steps:
- task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
  displayName: 'Component Detection - OSS Compliance'
  inputs:
    ignoreDirectories: '$(Build.SourcesDirectory)/tests'

- powershell: |
   Write-Host "##vso[task.setvariable variable=SignType]real"
  displayName: 'Set sign binary variable'
  condition: >
   and(in(variables['Build.Reason'], 'Schedule', 'Manual'), eq(variables['Build.DefinitionName'], 'Oryx-CI'), 
   or(startsWith(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'],'refs/heads/patch/' )))

- task: NuGetToolInstaller@0
  displayName: 'Use NuGet 4.6.2'
  inputs:
    versionSpec: 4.6.2
  condition: and(succeeded(), eq(variables['SignType'], 'real'))

- task: ms-vseng.MicroBuildTasks.30666190-6959-11e5-9f96-f56098202fef.MicroBuildSigningPlugin@1
  displayName: 'Install Signing Plugin'
  inputs:
    signType: '$(SignType)'
  condition: and(succeeded(), eq(variables['SignType'], 'real'))

- task: NuGetCommand@2
  displayName: 'NuGet restore'
  inputs:
    restoreSolution: Oryx.sln
  condition: and(succeeded(), eq(variables['SignType'], 'real'))

- task: DotNetCoreCLI@2
  displayName: 'dotnet publish linux'
  inputs:
    command: publish
    publishWebProjects: false
    projects: |
     src\BuildScriptGeneratorCLI\BuildScriptGeneratorCli.csproj
    arguments: '-c $(BuildConfiguration) -r linux-x64'
    zipAfterPublish: false
    modifyOutputPath: false
  condition: and(succeeded(), eq(variables['SignType'], 'real'))

- task: VSBuild@1
  displayName: 'Sign Oryx Binaries'
  inputs:
    solution: 'src/BuildScriptGeneratorCli/Oryx_sign.signproj'
    msbuildArgs: '/t:SignFiles /p:RuntimeIdentifier=linux-x64 /p:MicroBuild_SigningEnabled=true'
    configuration: '$(BuildConfiguration)'
  condition: and(succeeded(), eq(variables['SignType'], 'real'))

- task: CopyFiles@2
  displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)/binaries'
  inputs:
    SourceFolder: 'src/BuildScriptGeneratorCli/bin/$(BuildConfiguration)/linux-x64/publish'
    Contents: '**\*'
    TargetFolder: '$(Build.ArtifactStagingDirectory)/binaries'
    CleanTargetFolder: true
  condition: and(succeeded(), eq(variables['SignType'], 'real'))

- task: PublishPipelineArtifact@0
  displayName: 'Publish Pipeline Artifact'
  inputs:
    artifactName: 'drop-$(Build.BuildNumber)'
    targetPath: '$(Build.ArtifactStagingDirectory)'
  condition: and(succeeded(), eq(variables['SignType'], 'real'))