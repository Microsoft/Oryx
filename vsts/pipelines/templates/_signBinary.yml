steps:
- task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
  displayName: 'Component Detection - OSS Compliance'
  inputs:
    ignoreDirectories: '$(Build.SourcesDirectory)/tests'

- powershell: |
   Write-Host "##vso[task.setvariable variable=SignType;isOutput=true]real"
  name: setSignTypeVariable
  displayName: 'Set sign binary variable'
  condition: >
   and(in(variables['Build.Reason'], 'Schedule', 'Manual'), eq(variables['Build.DefinitionName'], 'Oryx-CI'), 
   or(startsWith(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'],'refs/heads/patch/' )))

- script: |
    echo $(setSignTypeVariable.SignType)
  name: SignType

- task: NuGetToolInstaller@0
  displayName: 'Use NuGet 4.6.2'
  inputs:
    versionSpec: 4.6.2
  condition: and(succeeded(), eq(variables['setSignTypeVariable.SignType'], 'real'))

- task: ms-vseng.MicroBuildTasks.30666190-6959-11e5-9f96-f56098202fef.MicroBuildSigningPlugin@1
  displayName: 'Install Signing Plugin'
  inputs:
    signType: '$(setSignTypeVariable.SignType)'
  condition: and(succeeded(), eq(variables['setSignTypeVariable.SignType'], 'real'))

- powershell: |
    $sdkVersion="2.1.805"
    Write-Host "Settng .NET Core SDK version variable to $sdkVersion"
    Write-Host "##vso[task.setvariable variable=DotNetCoreSdkVersion]$sdkVersion"
  displayName: 'Setting .NET Core SDK version as a variable for later tasks'
  condition: and(succeeded(), eq(variables['setSignTypeVariable.SignType'], 'real'))

- task: UseDotNet@2
  displayName: 'Installing .NET Core SDK'
  inputs:
    packageType: 'sdk'
    version: '$(DotNetCoreSdkVersion)'

- powershell: |
    Write-Host "Creating global.json with sdk version $(DotNetCoreSdkVersion)..."
    dotnet new globaljson --sdk-version $(DotNetCoreSdkVersion)

    Write-Host "Setting up git_commit and build_number as env variable"
    $env:GIT_COMMIT=$(git rev-parse HEAD)
    $env:BUILD_NUMBER=$env:BUILD_BUILDNUMBER
    $projectFile="src\BuildScriptGeneratorCLI\BuildScriptGeneratorCli.csproj"
    
    dotnet build Oryx.sln -c $(BuildConfiguration)
    dotnet build `
      $projectFile `
      -c $(BuildConfiguration) `
      -r linux-x64
    dotnet publish `
      src\BuildScriptGeneratorCLI\BuildScriptGeneratorCli.csproj `
      -r linux-x64 `
      -c $(BuildConfiguration)
  displayName: 'dotnet publish the BuildScriptGeneratorCli project'
  condition: and(succeeded(), eq(variables['setSignTypeVariable.SignType'], 'real'))

- task: VSBuild@1
  displayName: 'Sign Oryx Binaries'
  inputs:
    solution: 'src/BuildScriptGeneratorCli/Oryx_sign.signproj'
    msbuildArgs: '/t:SignFiles /p:RuntimeIdentifier=linux-x64 /p:MicroBuild_SigningEnabled=true'
    configuration: '$(BuildConfiguration)'
  condition: and(succeeded(), eq(variables['setSignTypeVariable.SignType'], 'real'))
  
- task: PowerShell@2
  displayName: 'Re-package already generated NuGet packages with signed binaries'
  inputs:
    filePath: 'vsts\scripts\createNuGetPackages.ps1'
  condition: and(succeeded(), eq(variables['setSignTypeVariable.SignType'], 'real'))

- task: VSBuild@1
  displayName: 'Sign NuGet packages'
  inputs:
    solution: 'vsts/nuget.signproj'
    msbuildArgs: '/t:SignFiles /p:MicroBuild_SigningEnabled=true'
  condition: and(succeeded(), eq(variables['setSignTypeVariable.SignType'], 'real'))

- powershell: |
    Copy-Item -Path artifacts\packages -Destination $(Build.ArtifactStagingDirectory)\packages -Recurse
  displayName: 'Copying nuget packages to artifact staging directory'
  condition: and(succeeded(), eq(variables['setSignTypeVariable.SignType'], 'real'))

- task: ArchiveFiles@2
  displayName: 'Create compressed file of Oryx binaries'
  inputs:
    rootFolderOrFile: 'src\BuildScriptGeneratorCli\bin\$(BuildConfiguration)\linux-x64\publish'
    includeRootFolder: false
    archiveType: tar
    tarCompression: 'gz'
    archiveFile: '$(Build.ArtifactStagingDirectory)/oryx_linux_x64.tar.gz'
    replaceExistingArchive: true
    verbose: true
  condition: and(succeeded(), eq(variables['setSignTypeVariable.SignType'], 'real'))

- task: CopyFiles@2
  displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)/binaries'
  inputs:
    SourceFolder: 'src/BuildScriptGeneratorCli/bin/$(BuildConfiguration)/linux-x64/publish'
    Contents: '**\*'
    TargetFolder: '$(Build.ArtifactStagingDirectory)/binaries'
    CleanTargetFolder: true
  condition: and(succeeded(), eq(variables['setSignTypeVariable.SignType'], 'real'))

- task: PublishPipelineArtifact@0
  displayName: 'Publish Pipeline Artifact'
  inputs:
    artifactName: 'signed_binaries'
    targetPath: '$(Build.ArtifactStagingDirectory)'
  condition: eq(variables['setSignTypeVariable.SignType'], 'real')