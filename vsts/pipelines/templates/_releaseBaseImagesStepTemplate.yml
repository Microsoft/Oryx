parameters:
  ascName: OryxMCR
  acrDevName: oryxdevmcr
  acrProdName: oryxmcr
  acrPmeProdName: oryxprodmcr
  acrPmeProdSrvConnection: Oryx-PME-ACR-Production
  baseImageName: ''  # defaults
  baseImageRepository: public/oryx/base

steps:
- checkout: self
  clean: true

- task: Docker@1
  displayName: Container registry login
  inputs:
    command: login
    azureSubscriptionEndpoint: ${{ parameters.ascName }}
    azureContainerRegistry: ${{ parameters.acrDevName }}.azurecr.io

- task: DownloadBuildArtifacts@0
  displayName: 'Download Artifacts for release'
  inputs:
    artifactName: drop

- task: CopyFiles@2
  displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
  inputs:
    SourceFolder: '$(System.ArtifactsDirectory)'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

- task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
  displayName: 'Pull and create release tags for staging ACR'
  inputs:
    type: FilePath
    scriptPath: ./vsts/scripts/tagBaseImagesForRelease.sh
    args: '${{ parameters.baseImageName }} ${{ parameters.acrProdName }}'

- task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
  displayName: 'Pull and create release tags for PME staging ACR'
  inputs:
    type: FilePath
    scriptPath: ./vsts/scripts/tagBaseImagesForRelease.sh
    args: '${{ parameters.baseImageName }} ${{ parameters.acrPmeProdName }}'

- task: Docker@1
  displayName: 'Push stretch image(s) to staging registry'
  inputs:
    azureSubscriptionEndpoint: ${{ parameters.ascName }}
    azureContainerRegistry: ${{ parameters.acrProdName }}
    command: 'Push an image'
    pushMultipleImages: true
    imageNamesPath: '$(Build.ArtifactStagingDirectory)/drop/images/${{ parameters.baseImageName }}/${{ parameters.acrProdName }}-stretch-base-images-mcr.txt'
    includeLatestTag: false
    enforceDockerNamingConvention: true

- task: Docker@1
  displayName: 'Push buster image(s) to staging registry'
  inputs:
    azureSubscriptionEndpoint: ${{ parameters.ascName }}
    azureContainerRegistry: ${{ parameters.acrProdName }}.azurecr.io
    command: 'Push an image'
    pushMultipleImages: true
    imageNamesPath: '$(Build.ArtifactStagingDirectory)/drop/images/${{ parameters.baseImageName }}/${{ parameters.acrProdName }}-buster-base-images-mcr.txt'
    includeLatestTag: false
    enforceDockerNamingConvention: true

- task: Docker@2
  displayName: Login to production PME ACR
  inputs:
    command: login
    containerRegistry: ${{ parameters.acrPmeProdSrvConnection }}

- script: echo base image is ${{ parameters.baseImageName }} and repository is ${{ parameters.baseImageRepository }} 

- ${{ if contains(parameters.baseImageName, 'yarn-cache-build') }}:
  - task: Docker@2
    displayName: Push yarn-cache base image to PME ACR
    inputs:
      command: push
      containerRegistry: ${{ parameters.acrPmeProdSrvConnection }}
      repository: ${{ parameters.baseImageRepository }}
      tags: |
        build-yarn-cache-$(Build.BuildNumber)

- ${{ if eq(parameters.baseImageName, 'dotnetcore') }}:
  - task: Docker@2
    displayName: Push dotnet core base images to PME ACR
    inputs:
      command: push
      containerRegistry: ${{ parameters.acrPmeProdSrvConnection }}
      repository: ${{ parameters.baseImageRepository }}
      tags: |
        dotnetcore-1.0-$(Build.BuildNumber)
        dotnetcore-1.1-$(Build.BuildNumber)
        dotnetcore-2.0-$(Build.BuildNumber)
        dotnetcore-2.1-$(Build.BuildNumber)
        dotnetcore-2.2-$(Build.BuildNumber)
        dotnetcore-3.0-$(Build.BuildNumber)
        dotnetcore-3.1-$(Build.BuildNumber)
        dotnetcore-5.0-$(Build.BuildNumber)

- ${{ if eq(parameters.baseImageName, 'node') }}:
  - task: Docker@2
    displayName: Push node base images to PME ACR
    inputs:
      command: push
      containerRegistry: ${{ parameters.acrPmeProdSrvConnection }}
      repository: ${{ parameters.baseImageRepository }}
      tags: |
        node-10.12-$(Build.BuildNumber)
        node-8.12-$(Build.BuildNumber)
        node-8-$(Build.BuildNumber)
        node-8.11-$(Build.BuildNumber)
        node-6.11-$(Build.BuildNumber)
        node-10.14-$(Build.BuildNumber)
        node-6-$(Build.BuildNumber)
        node-14-$(Build.BuildNumber)
        node-10.10-$(Build.BuildNumber)
        node-8.8-$(Build.BuildNumber)
        node-4.4-$(Build.BuildNumber)
        node-9.4-$(Build.BuildNumber)
        node-6.6-$(Build.BuildNumber)
        node-4.8-$(Build.BuildNumber)
        node-6.2-$(Build.BuildNumber)
        node-10-$(Build.BuildNumber)
        node-6.9-$(Build.BuildNumber)
        node-8.2-$(Build.BuildNumber)
        node-12-$(Build.BuildNumber)
        node-10.1-$(Build.BuildNumber)
        node-6.10-$(Build.BuildNumber)
        node-4.5-$(Build.BuildNumber)
        node-8.1-$(Build.BuildNumber)
        node-8.0-$(Build.BuildNumber)
        node-8.9-$(Build.BuildNumber)

- ${{ if eq(parameters.baseImageName, 'php') }}:
  - task: Docker@2
    displayName: Push php base images to PME ACR
    inputs:
      command: push
      containerRegistry: ${{ parameters.acrPmeProdSrvConnection }}
      repository: ${{ parameters.baseImageRepository }}
      tags: |
        php-7.4-$(Build.BuildNumber)
        php-7.3-$(Build.BuildNumber)
        php-7.2-$(Build.BuildNumber)
        php-7.0-$(Build.BuildNumber)
        php-5.6-$(Build.BuildNumber)

- ${{ if eq(parameters.baseImageName, 'php-fpm') }}:
  - task: Docker@2
    displayName: Push php-fpm base images to PME ACR
    inputs:
      command: push
      containerRegistry: ${{ parameters.acrPmeProdSrvConnection }}
      repository: ${{ parameters.baseImageRepository }}
      tags: |
        php-7.4-fpm-$(Build.BuildNumber)
        php-7.3-fpm-$(Build.BuildNumber)
        php-7.2-fpm-$(Build.BuildNumber)
        
- task: Docker@2
  displayName: Logout from PME ACR
  inputs:
    command: logout
    containerRegistry: ${{ parameters.acrPmeProdSrvConnection }}

- task: ShellScript@2
  displayName: 'Clean up Docker containers and images'
  inputs:
    scriptPath: ./vsts/scripts/cleanDocker.sh
  condition: true