  steps:
  - task: DownloadPipelineArtifact@0
    displayName: 'Download Pipeline Artifact'
    inputs:
      pipelineId: 'Oryx-BuildImage-MCR-UI'
      targetPath: '$(Build.SourcesDirectory)'

- task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
  displayName: 'Set Build Context'
  inputs:
    type: InlineScript
    script: 'echo "##vso[task.setvariable variable=EmbedBuildContextInImages;]true"'
  condition: and(succeeded(), eq(variables['Build.Reason'], 'Schedule'))

  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: 'Build Build image'
    inputs:
      type: FilePath
      scriptPath: 'build/build-buildimages.sh'

  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: 'Test Build image'
    inputs:
      type: FilePath
      scriptPath: 'build/test-buildimages.sh'

  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: 'Test BuildScriptGenerator'
    inputs:
      type: FilePath
      scriptPath: 'build/test-buildscriptgenerator.sh'

  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: 'Build Runtime image'
    inputs:
      type: FilePath
      scriptPath: 'build/build-runtimeimages.sh'

  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: 'Test Run time images'
    inputs:
      type: FilePath
      scriptPath: 'build/test-runtimeimages.sh'

  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: 'Test startup command generator'
    inputs:
      type: FilePath
      scriptPath: 'build/test-startupscriptgenerators.sh'

  - task: AzureKeyVault@1
    displayName: 'Fetch storage account key from vault'
    inputs:
      azureSubscription: 'Oryx Build'
      KeyVaultName: oryx
      SecretsFilter: 'STORAGEACCOUNTKEY,KUBECONFIG'

  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: 'Test integration '
    inputs:
      type: FilePath
      scriptPath: 'build/test-integration.sh'

  - task: CopyFiles@2
    displayName: 'Copy artifacts from source repo to agent artifacts folder'
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)/artifacts'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: Docker@1
    displayName: 'Push Oryx BuildImage to DockerHub'
    inputs:
      containerregistrytype: 'Container Registry'
      dockerRegistryEndpoint: oryx
      command: 'Push an image'
      pushMultipleImages: true
      imageNamesPath: '$(Build.ArtifactStagingDirectory)/images/build-images.txt'
    condition: and(succeeded(), eq(variables['Build.Reason'], 'Schedule'))

  - task: Docker@1
    displayName: 'Push Oryx BuildImage to MCR'
    inputs:
      azureSubscriptionEndpoint: OryxMCR
      azureContainerRegistry: oryxdevmcr.azurecr.io
      command: 'Push an image'
      pushMultipleImages: true
      imageNamesPath: '$(Build.ArtifactStagingDirectory)/images/build-images-acr.txt'
    condition: and(succeeded(), eq(variables['Build.Reason'], 'Schedule'))

  - task: Docker@1
    displayName: 'Push Oryx Runtime images to DockerHub'
    inputs:
      containerregistrytype: 'Container Registry'
      dockerRegistryEndpoint: oryx
      command: 'Push an image'
      pushMultipleImages: true
      imageNamesPath: '$(Build.ArtifactStagingDirectory)/images/runtime-images.txt'
    condition: and(succeeded(), eq(variables['Build.Reason'], 'Schedule'))

  - task: Docker@1
    displayName: 'Push Oryx Runtime images to MCR'
    inputs:
      azureSubscriptionEndpoint: OryxMCR
      azureContainerRegistry: oryxdevmcr.azurecr.io
      command: 'Push an image'
      pushMultipleImages: true
      imageNamesPath: '$(Build.ArtifactStagingDirectory)/images/runtime-images-acr.txt'
    condition: and(succeeded(), eq(variables['Build.Reason'], 'Schedule'))

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: drop'

  - task: ArchiveFiles@2
    displayName: 'Archive docker files and scripts for Oryx build Image'
    inputs:
      rootFolderOrFile: images
      archiveFile: '$(Build.ArtifactStagingDirectory)/images/dockerFiles.zip'

  - task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
    displayName: 'Clean up docker artifact'
    inputs:
      type: FilePath
      scriptPath: vsts/scripts/dockerCleanup.sh